<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hanne Oberman</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Hanne Oberman</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Hanne Oberman</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Twitter treasures #rstats</title>
      <link>/post/twitter-treasures/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/twitter-treasures/</guid>
      <description>


&lt;p&gt;A list of things I found on the internet and thought to be useful.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reduce whitespace in printed lists&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a list
alist &amp;lt;- list(a=1,b=2,c=list(d=1:3, e=&amp;quot;hello&amp;quot;))
# regular print
alist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $a
## [1] 1
## 
## $b
## [1] 2
## 
## $c
## $c$d
## [1] 1 2 3
## 
## $c$e
## [1] &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# shorter print
print.simple.list(alist)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      _    
## a    1    
## b    2    
## c.d1 1    
## c.d2 2    
## c.d3 3    
## c.e  hello&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/coolbutuseless/status/1259972282421739522?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/coolbutuseless/status/1259972282421739522?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rename columns &lt;em&gt;inside&lt;/em&gt; &lt;code&gt;dyplyr::select()&lt;/code&gt; call&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
mtcars %&amp;gt;% 
  # select some variables *and* rename one
  select(mpg, cyl, displacement = disp) %&amp;gt;% 
  # look at structure of new object
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 32
## Columns: 3
## $ mpg          &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, ...
## $ cyl          &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, ...
## $ displacement &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/n_a_gilbert/status/1259866258708840452?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/n_a_gilbert/status/1259866258708840452?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comment out any step in a pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  # perform some wrangling
  filter(cyl &amp;gt; 4) %&amp;gt;% 
  group_by(cyl) %&amp;gt;% 
  # comment out the last line
    # summarise(mean_wt = mean(wt)) %&amp;gt;% 
  # no problem with identity()
  identity()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 11
## # Groups:   cyl [2]
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  4  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  5  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  6  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  7  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
##  8  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4
##  9  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3
## 10  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/thomas_neitmann/status/1260111985968119808?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/thomas_neitmann/status/1260111985968119808?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rename objects/variables/etc. within one &lt;code&gt;R&lt;/code&gt; chunck only&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Ctrl + Alt + Shift + M&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/sergiouribe/status/1251446686255329283?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/sergiouribe/status/1251446686255329283?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select text vertically (e.g., &lt;code&gt;geom_line()&lt;/code&gt; to &lt;code&gt;geom_point()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Alt + cursor&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;auto-format &lt;code&gt;R&lt;/code&gt; script/chunk&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Ctrl + Shift + A&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;round to nearest tenth, hundred, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(
  # some vector
  c(1, 5, 6, 90, 11, 27, pi),
  # to -1 decimal = tenth
  digits = -1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  0  0 10 90 10 30  0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/_ColinFay/status/1250706532762861569?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/_ColinFay/status/1250706532762861569?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apply function to columns of dataframe&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)
# expose contents
mtcars %$% lm(mpg ~ disp + hp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = mpg ~ disp + hp)
## 
## Coefficients:
## (Intercept)         disp           hp  
##    30.73590     -0.03035     -0.02484&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;rename columns in dataframe at the end of a pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars %&amp;gt;% 
  # some wrangling
  filter(cyl &amp;gt; 4) %&amp;gt;% 
  # rename variables
  setNames(., 1:dim(.)[2])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       1 2     3   4    5     6     7 8 9 10 11
## 1  21.0 6 160.0 110 3.90 2.620 16.46 0 1  4  4
## 2  21.0 6 160.0 110 3.90 2.875 17.02 0 1  4  4
## 3  21.4 6 258.0 110 3.08 3.215 19.44 1 0  3  1
## 4  18.7 8 360.0 175 3.15 3.440 17.02 0 0  3  2
## 5  18.1 6 225.0 105 2.76 3.460 20.22 1 0  3  1
## 6  14.3 8 360.0 245 3.21 3.570 15.84 0 0  3  4
## 7  19.2 6 167.6 123 3.92 3.440 18.30 1 0  4  4
## 8  17.8 6 167.6 123 3.92 3.440 18.90 1 0  4  4
## 9  16.4 8 275.8 180 3.07 4.070 17.40 0 0  3  3
## 10 17.3 8 275.8 180 3.07 3.730 17.60 0 0  3  3
## 11 15.2 8 275.8 180 3.07 3.780 18.00 0 0  3  3
## 12 10.4 8 472.0 205 2.93 5.250 17.98 0 0  3  4
## 13 10.4 8 460.0 215 3.00 5.424 17.82 0 0  3  4
## 14 14.7 8 440.0 230 3.23 5.345 17.42 0 0  3  4
## 15 15.5 8 318.0 150 2.76 3.520 16.87 0 0  3  2
## 16 15.2 8 304.0 150 3.15 3.435 17.30 0 0  3  2
## 17 13.3 8 350.0 245 3.73 3.840 15.41 0 0  3  4
## 18 19.2 8 400.0 175 3.08 3.845 17.05 0 0  3  2
## 19 15.8 8 351.0 264 4.22 3.170 14.50 0 1  5  4
## 20 19.7 6 145.0 175 3.62 2.770 15.50 0 1  5  6
## 21 15.0 8 301.0 335 3.54 3.570 14.60 0 1  5  8&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;print variable names &lt;em&gt;cleanly&lt;/em&gt; (i.e., comma separated and without quote marks)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# print just the names
paste(colnames(mtcars), collapse = &amp;quot;, &amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/ludmila_janda/status/1217486240058134528?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/ludmila_janda/status/1217486240058134528?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;save output of &lt;code&gt;R&lt;/code&gt; script/chunk&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# define output file, specify whether to add to existing output
sink(file=&amp;quot;output.txt&amp;quot;, append = FALSE)
# run some code
mtcars %&amp;gt;% 
  glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 32
## Columns: 11
## $ mpg  &amp;lt;dbl&amp;gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17...
## $ cyl  &amp;lt;dbl&amp;gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4,...
## $ disp &amp;lt;dbl&amp;gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8,...
## $ hp   &amp;lt;dbl&amp;gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, ...
## $ drat &amp;lt;dbl&amp;gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3....
## $ wt   &amp;lt;dbl&amp;gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150,...
## $ qsec &amp;lt;dbl&amp;gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90,...
## $ vs   &amp;lt;dbl&amp;gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,...
## $ am   &amp;lt;dbl&amp;gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,...
## $ gear &amp;lt;dbl&amp;gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3,...
## $ carb &amp;lt;dbl&amp;gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1,...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# save output
sink()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/olivier_klein/status/1203347039133802497?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/olivier_klein/status/1203347039133802497?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turn off scientific notation (e.g., &lt;code&gt;5.3e-2&lt;/code&gt; to &lt;code&gt;0.053&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(scipen = 999)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://twitter.com/edwardhkennedy/status/1188206942017196032?s=20&#34; class=&#34;uri&#34;&gt;https://twitter.com/edwardhkennedy/status/1188206942017196032?s=20&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list of datasets in &lt;code&gt;R&lt;/code&gt;: &lt;a href=&#34;https://vincentarelbundock.github.io/Rdatasets/datasets.html&#34; class=&#34;uri&#34;&gt;https://vincentarelbundock.github.io/Rdatasets/datasets.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Pre-study presentation SIPS 2019</title>
      <link>/publication/sips2019/</link>
      <pubDate>Mon, 13 Jan 2020 10:53:00 +0100</pubDate>
      <guid>/publication/sips2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Convergence Diagnostic for Multiple Imputation</title>
      <link>/post/convergence-diagnostic-for-multiple-imputation/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/convergence-diagnostic-for-multiple-imputation/</guid>
      <description>


&lt;p&gt;This file describes how convergence diagnostic &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is computed in the simulation study I ran for my Research Report. &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is also called ‘potential scale reduction factor’ or ‘Gelman-Rubin statistic’. It tells us how much the variance of an estimate could be shrunken down if we would have run infinitely many iterations.&lt;/p&gt;
&lt;div id=&#34;step-1-impute-some-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 1: Impute some data&lt;/h1&gt;
&lt;p&gt;It’s easiest to show how &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is computed by applying it on a simple example. Load the nhanes data and impute the variables with missingness.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load required packages/functions
library(magrittr)
library(mice)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: lattice&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;mice&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     cbind, rbind&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source(&amp;quot;C:/Users/User/Desktop/shinyMice/Simulation/Functions/Convergence.R&amp;quot;)
source(&amp;quot;C:/Users/User/Desktop/shinyMice/Simulation/Functions/Convergence_supplement.R&amp;quot;)

# set parameters
maxit &amp;lt;- 10
n.var &amp;lt;- 3 

# run imputation
imp &amp;lt;- mice(nhanes[,-1], maxit = maxit, print = F)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-evaluate-the-functions-to-use&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 2: Evaluate the functions to use&lt;/h1&gt;
&lt;p&gt;We are going to compute &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; values per imputed variable. As recommended by Vehtari et al. (2019), we compute split-half, rank-normalized &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; values for the bulk and the tails of the distribution. For the latter, we need to fold the imputation chains before splitting them in half and rank-normalizing them. Then, &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is computed for both (bulk and tails). The highest of these two &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; values is extracted. This is performed for each of the imputed variables, and only the maximum &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; value across variables is reported.&lt;/p&gt;
&lt;p&gt;The rhat_function function is the wrapper that performs all of this. Within the function, we call 4 other functions (explaination below): fold_sims(), split_chains(), z_scale(), and get.rhat().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# show the contents of the function
rhat_function&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (imp, maxit, n.var = 4, moment = &amp;quot;mean&amp;quot;) 
## {
##     rhat &amp;lt;- numeric(length = n.var)
##     names(rhat) &amp;lt;- attr(imp$chainMean, &amp;quot;dimnames&amp;quot;)[[1]]
##     if (moment == &amp;quot;mean&amp;quot;) {
##         sims &amp;lt;- imp$chainMean
##     }
##     else if (moment == &amp;quot;variance&amp;quot;) {
##         sims &amp;lt;- imp$chainVar
##     }
##     for (v in 1:n.var) {
##         rhat_bulk &amp;lt;- sims[v, , ] %&amp;gt;% split_chains() %&amp;gt;% z_scale() %&amp;gt;% 
##             get.rhat(maxit = maxit)
##         rhat_tail &amp;lt;- sims[v, , ] %&amp;gt;% fold_sims() %&amp;gt;% split_chains() %&amp;gt;% 
##             z_scale() %&amp;gt;% get.rhat(maxit = maxit)
##         rhat[v] &amp;lt;- max(rhat_bulk, rhat_tail)
##     }
##     return(rhat)
## }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first function inside rhat_function is split_chains(). This ‘chops’ the chains in two, to assess trending within chains.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# show the contents of the function
split_chains&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (sims) 
## {
##     niter &amp;lt;- dim(sims)[1]
##     if (niter &amp;lt; 4) 
##         return(sims)
##     half &amp;lt;- niter/2
##     cbind(sims[1:floor(half), ], sims[ceiling(half + 1):niter, 
##         ])
## }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the halved chains are rank-normalized.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# show the contents of the function
z_scale&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (x) 
## {
##     S &amp;lt;- length(x)
##     r &amp;lt;- rank(x, ties.method = &amp;quot;average&amp;quot;)
##     z &amp;lt;- qnorm((r - 1/2)/S)
##     if (!is.null(dim(x))) {
##         z &amp;lt;- array(z, dim = dim(x), dimnames = dimnames(x))
##     }
##     z
## }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To detect non-convergence in the tails, &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is also computed on the folded chains (which are also split and rank-normalized).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# show the contents of the function
fold_sims&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (sims) 
## {
##     abs(sims - median(sims))
## }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only then do we get to the actual &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; function. In the get.rhat function, the following equations are applied:&lt;/p&gt;
&lt;p&gt;&#34;In the equations below, &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; is the number of draws per chain, &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; is the number of chains, and &lt;span class=&#34;math inline&#34;&gt;\(S = MN\)&lt;/span&gt; is the total number of draws from all chains. For each scalar summary of interest &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;, we compute &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt;, the between- and within-chain variances:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
B =\frac{N}{M-1} \sum_{m=1}^{M}\left(\bar{\theta}^{(\cdot m)}-\bar{\theta}^{(\cdot \cdot)}\right)^{2}, 
\text { where } \bar{\theta}^{(\cdot m)}=\frac{1}{N} \sum_{n=1}^{N} \theta^{(n m)}, 
\text { and } \bar{\theta}^{(\cdot \cdot)}=\frac{1}{M} \sum_{m=1}^{M} \bar{\theta}^{(\cdot m)} \\
W =\frac{1}{M} \sum_{m=1}^{M} s_{j}^{2}, 
\text { where } s_{m}^{2}=\frac{1}{N-1} \sum_{n=1}^{N}\left(\theta^{(n m)}-\bar{\theta}^{(\cdot m)}\right)^{2}&amp;quot;. 
\text{ Vehtari et al., 2019, p. 5} 
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The between and within chain variances are computed from the chain means of the mids object, that underwent the previous transformations (folding, splitting, rank-normalizing). The average of the chain means per imputation &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; is &lt;span class=&#34;math inline&#34;&gt;\(\bar{\theta}^{(\cdot m)}\)&lt;/span&gt;. The average of these &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; values is &lt;span class=&#34;math inline&#34;&gt;\(\bar{\theta}^{(\cdot \cdot)}\)&lt;/span&gt;. &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; is the number of iterations (‘maxit’). So we compute &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; as &lt;code&gt;maxit * var(apply(sims, 2, mean))&lt;/code&gt;. And &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt; is computed as &lt;code&gt;mean(apply(sims, 2, var))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; we need to compute the weighted average of &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\widehat{\operatorname{var}}^{+}\)&lt;/span&gt;, and evaluate this against the within chain variance W. The weighted average is is computed as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation*}
\widehat{\operatorname{var}}^{+}(\theta | y)=\frac{N-1}{N} W+\frac{1}{N} B,
\end{equation*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Then finally, potential scale reduction factor &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is obtained as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{equation*}
\widehat{R}=\sqrt{\frac{\widehat{\operatorname{var}}^{+}(\theta | y)}{W}}.
\end{equation*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; is computed for each variable with the function ‘get.rhat()’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# show the contents of the function
get.rhat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (sims, maxit = maxit) 
## {
##     var_between &amp;lt;- maxit * var(apply(sims, 2, mean))
##     var_within &amp;lt;- mean(apply(sims, 2, var))
##     rhat &amp;lt;- sqrt((var_between/var_within + maxit - 1)/maxit)
##     return(rhat)
## }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3-apply-these-functions-to-get-widehatr-values&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Step 3: Apply these functions to get &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; values&lt;/h1&gt;
&lt;p&gt;Now we know what’s happening, let’s apply it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rhat_function(imp, maxit, n.var = n.var)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      bmi      hyp      chl 
## 1.101684 1.058439 1.155748&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; value is nice and high, but I also got values below one. Which is theoretically impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;so-my-question-to-you-is-how-is-it-possible-that-we-can-obtain-widehatr-values-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;So my question to you is: How is it possible that we can obtain &lt;span class=&#34;math inline&#34;&gt;\(\widehat{R}\)&lt;/span&gt; values &amp;lt; 1?&lt;/h1&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MLaRP</title>
      <link>/project/internal-project/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;This project page is dedicated to the course &amp;lsquo;Mark-up Languages and Reproducible Programming&amp;rsquo; (UU).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ShinyMICE</title>
      <link>/project/external-project/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
